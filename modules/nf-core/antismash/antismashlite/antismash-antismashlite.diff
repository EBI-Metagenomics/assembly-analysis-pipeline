Changes in module 'nf-core/antismash/antismashlite'
--- modules/nf-core/antismash/antismashlite/main.nf
+++ modules/nf-core/antismash/antismashlite/main.nf
@@ -2,25 +2,11 @@
     tag "${meta.id}"
     label 'process_medium'
 
-    conda "${moduleDir}/environment.yml"
-    container "${workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container
-        ? 'https://depot.galaxyproject.org/singularity/antismash-lite:7.1.0--pyhdfd78af_0'
-        : 'biocontainers/antismash-lite:7.1.0--pyhdfd78af_0'}"
-
-    containerOptions {
-        ['singularity', 'apptainer'].contains(workflow.containerEngine)
-            ? "-B ${antismash_dir}:/usr/local/lib/python3.10/site-packages/antismash"
-            : workflow.containerEngine == 'docker'
-                ? "-v \$PWD/${antismash_dir}:/usr/local/lib/python3.10/site-packages/antismash"
-                : ''
-    }
+    container 'quay.io/microbiome-informatics/antismash:7.1.0.1_2'
 
     input:
-    tuple val(meta), path(sequence_input)
+    tuple val(meta), path(sequence_input), path(gff)
     path databases
-    path antismash_dir
-    // Optional input: AntiSMASH installation folder. It is not needed for using this module with conda, but required for docker/singularity (see meta.yml).
-    path gff
 
     output:
     tuple val(meta), path("${prefix}/clusterblast/*_c*.txt"), optional: true, emit: clusterblast_file
@@ -30,8 +16,8 @@
     tuple val(meta), path("${prefix}/knownclusterblast/*_c*.txt"), optional: true, emit: knownclusterblast_txt
     tuple val(meta), path("${prefix}/svg/clusterblast*.svg"), optional: true, emit: svg_files_clusterblast
     tuple val(meta), path("${prefix}/svg/knownclusterblast*.svg"), optional: true, emit: svg_files_knownclusterblast
-    tuple val(meta), path("${prefix}/*.gbk"), emit: gbk_input
-    tuple val(meta), path("${prefix}/*.json"), emit: json_results
+    tuple val(meta), path("${prefix}/${prefix}.gbk"), emit: gbk_input
+    tuple val(meta), path("${prefix}/${prefix}.json"), emit: json_results
     tuple val(meta), path("${prefix}/*.log"), emit: log
     tuple val(meta), path("${prefix}/*.zip"), emit: zip
     tuple val(meta), path("${prefix}/*region*.gbk"), optional: true, emit: gbk_results
@@ -46,12 +32,23 @@
 
     script:
     def args = task.ext.args ?: ''
-    prefix = task.ext.suffix ? "${meta.id}${task.ext.suffix}" : "${meta.id}"
-    gff_flag = gff ? "--genefinding-gff3 ${gff}" : ""
-
+    prefix   = task.ext.suffix ?: "${meta.id}"
+    
+    def gff_flag = gff ? "--genefinding-gff3 ${gff.name.replace('.gz', '')}" : ""
+    
+    def is_compressed = sequence_input.getExtension() == "gz" ? true : false
+    def sequence_file = is_compressed ? sequence_input.getBaseName() : sequence_input
     """
     ## We specifically do not include on-the-fly annotations (--genefinding-tool none) as
     ## this should be run as a separate module for versioning purposes
+
+    if [ "${is_compressed}" == "true" ]; then
+        # - remove in case of retry - #
+        rm -f ${sequence_file}
+        gzip -c -d ${sequence_input} > ${sequence_file}
+    fi
+
+    gunzip -c -d ${gff} > ${gff.name.replace('.gz', '')}
 
     antismash \\
         ${args} \\
@@ -62,7 +59,7 @@
         --genefinding-tool none \\
         --logfile ${prefix}/${prefix}.log \\
         --databases ${databases} \\
-        ${sequence_input}
+        ${sequence_file}
 
     cat <<-END_VERSIONS > versions.yml
     "${task.process}":

************************************************************
